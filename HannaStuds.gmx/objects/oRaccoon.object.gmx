<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGubbe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sGubbeMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
dir = 1; // 1 = right, -1 = left
hspd = 2;
vspd = 0;
grav = 0.2;
jumpSpd = 10;
playerBounce = false;
imgAngle = 45;
faceSpr = sGubbeFace;
image_speed = 0.5;
draw_xscale = 1;
draw_yscale = 1;
imgColor = c_purple;
timer = 0;
firstFall = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerBounce = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = imgAngle; // for mask to follow sprite rotation
x += hspd*dir;

if (vspd &lt; 10)
{
    vspd += grav; 
}

if (place_meeting(x,y+vspd,oSolid)) // if on ground
{
    faceSpr = sGubbeFace;
    sprite_index = sGubbe;
    while(!place_meeting(x,y+sign(vspd), oSolid))
    {
        y += sign(vspd);
    }
    if (!place_free(x,y-1))
    {
        y-=0.5;
    }
    vspd = 0;
    imgAngle = sin_oscillate(-5,5,timer);
    timer+=10;
}
else // if in air
{
    if (firstFall)
    {
        if (instance_number(oRaccoon) &gt; 1)
        {
            for(var i = 0; i &lt; instance_number(oRaccoon); i++) 
            {
                var inst = instance_find(oRaccoon,i);
                if (inst.firstFall == false &amp;&amp; (y &lt;= inst.y+32 &amp;&amp; y &gt;= inst.y-32) &amp;&amp; vspd &gt; 0 &amp;&amp; inst.vspd &gt; 0)
                {
                    show_message(string(y) + "/" + string(inst.y));
                    instance_destroy();
                }
            }
        }
        firstFall = false;
    }
    
    faceSpr = sGubbeFallFace;
    sprite_index = sGubbeFall;
    imgAngle += 2*-dir;
}

if (place_meeting(x,y+vspd,oJumpBlock))
{
    vspd = 1 * -jumpSpd;
}

if (place_meeting(x,y+vspd,oPlayer) &amp;&amp; !place_meeting(x,y+vspd,oSolid)) // if collision with player
{
    if (oCtrl.bounced == false)
    {
        oCtrl.spawnTimer = oCtrl.firstBounceTime*0.75;
        oCtrl.bounced = true;
    }
    
    vspd = 1 * -jumpSpd;
}

y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &gt; room_width &amp;&amp; xstart &lt; room_width) || (x &lt; 0 &amp;&amp; xstart &gt; room_width))
{
    global.SCORE += 1;
    instance_destroy();
}
else if (y &gt; room_height)
{
    LIVES -= 1;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_outline(c_black);
draw_sprite_ext(sprite_index,image_index,x,y,draw_xscale,draw_yscale,imgAngle,c_white,image_alpha);
draw_sprite_ext(sprite_index,image_index,x,y,draw_xscale,draw_yscale,imgAngle,imgColor,0.2);
image_blend = c_white;
draw_sprite_ext(faceSpr,image_index,x,y,draw_xscale,draw_yscale,imgAngle,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
